type awsNetworkInterface @key(fields: "arn") {
  id: String! @id @search(by: [hash])
  accountId: String! @search(by: [hash])
  arn: String! @id @search(by: [hash, regexp])
  region: String @search(by: [hash, regexp])
  serviceDisplayName: String @default(add: { value: "Network Interface"})
  subnetId: String @search(by: [hash])
  macAddress: String @search(by: [hash, regexp])
  description: String @search(by: [hash, regexp, fulltext])
  availabilityZone: String @search(by: [hash, regexp])
  status: String @search(by: [hash, regexp])
  vpcId: String @search(by: [hash])
  interfaceType: String @search(by: [hash, regexp])
  securityGroups: [String] @search(by: [hash])
  privateDnsName: String @search(by: [hash, regexp])
  privateIps: [String] @search(by: [hash, regexp])
  attachment: awsNetworkInterfaceAttachment
  tags: [Tag]
  ec2Instance: [awsEc2] @hasInverse(field: networkInterfaces)
  eip: [awsEip] @hasInverse(field: networkInterface)
  natGateway: [awsNatGateway] @hasInverse(field: networkInterface)
  subnet: [awsSubnet] @hasInverse(field: networkInterface)
  vpc: [awsVpc] @hasInverse(field: networkInterface)
  efsMountTarget: [awsEfsMountTarget] @hasInverse(field: networkInterface)
  flowLogs: [awsFlowLog] @hasInverse(field: networkInterface) #change to singular
}

type awsNetworkInterfaceAttachment
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: ID
  attachmentId: String
  deleteOnTermination: Boolean
  status: String
}
