type aws_ec2_securitygroup {
  groupName: String!
  groupId: String! @id
}
type aws_ec2_metadata {
    cuid: String
}
type aws_ec2_metadata_options {
  state: String!
  httpTokens: String!
  httpPutResponseHopLimit: Int
  httpEndpoint: String! @id
}

# TODO: move to ebs schema
type ebs {
  attachTime: String!
  deleteOnTermination: Boolean!
  status: String!
  volumeId: String! @id
}
type aws_ec2_blockdevice {
  deviceName: String! @id
  ebs: ebs
}
type Tag {
    key: String
    value: String
}

type aws_ec2 @key(fields: "arn") {
	id: String!
  arn: String! @id
  region: String
  ami: String
  tenancy: String
  elasticIps: String
  publicDns: String
  privateDns: String
  monitoring: String
  privateIps: String
  keyPairName: String
  cpuCoreCount: Int
  hibernation: String
  ebsOptimized: String
  ipv4PublicIp: String
  instanceType: String
  ipv6Addresses: [String]
  placementGroup: String
  instanceState: String
  sourceDestCheck: String
  availabilityZone: String
  cpuThreadsPerCore: Int
  iamInstanceProfile: String
  deletionProtection: String
  primaryNetworkInterface: String
  metadataOptions: aws_ec2_metadata_options
  metadatasecurityGroupIdsOptions: [String]
  securityGroupIds: [String]
  ephemeralBlockDevice: [aws_ec2_blockdevice]
  associatePublicIpAddress: String
  alb: [aws_alb] @hasInverse(field: ec2Instance)
}
