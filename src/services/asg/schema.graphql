type awsMixedInstancesPolicy
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    launchTemplateId: String @search(by: [hash, regexp])
    launchTemplateName: String @search(by: [hash, regexp])
    launchTemplateVersion: String @search(by: [hash, regexp])
    launchTemplateOverrides: [awsLaunchTemplateOverrides]
    instDistrOnDemandAllocationStrategy: String @search(by: [hash, regexp])
    instDistrOnDemandBaseCapacity: Int
    instDistrOnDemandPercentageAboveBaseCapacity: Int
    instDistrSpotAllocationStrategy: String @search(by: [hash, regexp])
    instDistrSpotInstancePools: Int
    instDistrSpotMaxPrice: String @search(by: [hash, regexp])
  }

type awsLaunchTemplateOverrides
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    instanceType: String
    weightedCapacity: String
    launchTemplateId: String @search(by: [hash, regexp])
    launchTemplateName: String @search(by: [hash, regexp])
    launchTemplateVersion: String @search(by: [hash, regexp])
  }

type awsSuspendedProcess
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    processName: String @search(by: [hash, regexp])
    suspensionReason: String @search(by: [hash, regexp])
  }

type awsEnabledMetrics
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
    metric: String @search(by: [hash, regexp])
    granularity: String @search(by: [hash, regexp])
  }

type awsAsg @key(fields: "arn") {
  id: String! @search(by: [hash])
  arn: String! @id @search(by: [hash, regexp])
  name: String @search(by: [hash, regexp])
  region: String @search(by: [hash, regexp])
  launchConfigurationName: String @search(by: [hash, regexp])
  launchTemplateId: String @search(by: [hash, regexp])
  launchTemplateName: String @search(by: [hash, regexp])
  launchTemplateVersion: String @search(by: [hash, regexp])
  mixedInstancesPolicy: awsMixedInstancesPolicy
  minSize: Int @search
  maxSize: Int @search
  desiredCapacity: Int @search
  predictedCapacity: Int @search
  cooldown: Int @search
  availabilityZones: [String] @search(by: [hash])
  loadBalancerNames: [String] @search(by: [hash])
  targetGroupARNs: [String] @search(by: [hash])
  healthCheckType: String @search(by: [hash, regexp])
  healthCheckGracePeriod: Int @search
  ec2InstanceIds: [String]
  suspendedProcesses: [awsSuspendedProcess]
  placementGroup: String @search(by: [hash, regexp])
  vpcZoneIdentifier: String @search(by: [hash, regexp])
  enabledMetrics: [awsEnabledMetrics]
  status: String @search(by: [hash, regexp])
  terminationPolicies: [String] @search(by: [hash])
  newInstancesProtectedFromScaleIn: String @search(by: [hash, regexp])
  serviceLinkedRoleARN: String @search(by: [hash, regexp])
  maxInstanceLifetime: Int @search
  capacityRebalanceEnabled: String @search(by: [hash, regexp])
  warmPoolConfigMaxGroupPreparedCapacity: Int
  warmPoolConfigMinSize: Int
  warmPoolConfigPoolState: String @search(by: [hash, regexp])
  warmPoolConfigStatus: String @search(by: [hash, regexp])
  warmPoolSize: Int @search
  context: String @search(by: [hash, regexp])
  tags: [Tag]
  ec2Instance: [awsEc2] @hasInverse(field: "asg")
}
