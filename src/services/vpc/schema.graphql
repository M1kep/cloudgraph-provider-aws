type awsVpc @key(fields: "id") {
  accountId: String! @search(by: [hash])
  arn: String! @id
  region: String @search(by: [hash, regexp])
  defaultVpc: Boolean @search
  dhcpOptionsSet: String @search(by: [hash, regexp])
  enableDnsHostnames: Boolean @search
  enableDnsSupport: Boolean @search
  id: String! @id @search(by: [hash])
  instanceTenancy: String @search(by: [hash, regexp])
  ipV4Cidr: String @search(by: [hash, regexp])
  ipV6Cidr: String @search(by: [hash, regexp])
  state: String @search(by: [hash, regexp])
  tags: [Tag]
  alb: [awsAlb] @hasInverse(field: vpc)
  # ecs: [awsEcs] @hasInverse(field: vpc) TODO: Uncomment when ECS is added
  eip: [awsEip] @hasInverse(field: vpcs)
  # eks: [awsEks] @hasInverse(field: vpc) TODO: Uncomment when EKS is added
  elb: [awsElb] @hasInverse(field: vpc)
  igw: [awsIgw] @hasInverse(field: vpc)
  lambda: [awsLambda] @hasInverse(field: vpc)
  nacl: [awsNetworkAcl] @hasInverse(field: vpc)
  natGateway: [awsNatGateway] @hasInverse(field: vpc)
  networkInterface: [awsNetworkInterface] @hasInverse(field: vpc)
  rdsDbInstance: [awsRdsDbInstance] @hasInverse(field: vpc)
  redshiftCluster: [awsRedshiftCluster] @hasInverse(field: vpc)
  route53HostedZone: [awsRoute53HostedZone] @hasInverse(field: vpc)
  routeTable: [awsRouteTable] @hasInverse(field: vpc)
  subnet: [awsSubnet] @hasInverse(field: vpc)
  eksCluster: [awsEksCluster] @hasInverse(field: vpc)
  ecsService: [awsEcsService] @hasInverse(field: vpc)
  efsMountTarget: [awsEfsMountTarget] @hasInverse(field: vpc)
  flowLogs: [awsFlowLog] @hasInverse(field: vpc)
}
