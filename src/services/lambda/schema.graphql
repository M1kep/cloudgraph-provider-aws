type awsLambda @key(fields: "arn") {
  id: String! @search(by: [hash])
  accountId: String! @search(by: [hash])
  arn: String! @id @search(by: [hash, regexp])
  region: String @search(by: [hash, regexp])
  description: String @search(by: [hash, regexp, fulltext])
  handler: String @search(by: [hash, regexp])
  kmsKeyArn: String @search(by: [hash, regexp])
  lastModified: String @search(by: [hash, regexp])
  memorySize: Int @search
  reservedConcurrentExecutions: Int @search
  role: String @search(by: [hash, regexp])
  runtime: String @search(by: [hash, regexp])
  sourceCodeSize: String @search(by: [hash, regexp])
  timeout: Int @search
  tracingConfig: String @search(by: [hash, regexp])
  version: String @search(by: [hash, regexp])
  environmentVariables: [awsLambdaEnvironmentVariable]
  tags: [Tag]
  kms: [awsKms] @hasInverse(field: lambda)
  securityGroups: [awsSecurityGroup] @hasInverse(field: lambda)
  subnet: [awsSubnet] @hasInverse(field: lambda)
  vpc: [awsVpc] @hasInverse(field: lambda)
  cognitoUserPool: [awsCognitoUserPool] @hasInverse(field: lambda)
}

type awsLambdaEnvironmentVariable
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  id: String! @id
  key: String!
  value: String
}
