type awsElb @key(fields: "arn") {
  id: String!
  arn: String! @id
  dnsName: String
  hostedZone: String
  createdAt: String
  type: String
  status: String
  scheme: String
  vpc: String
  sourceSecurityGroup: awsElbSourceSecurityGroup
  securityGroups: [String]
  subnets: [String]
  accessLogs: String
  vpcId: String
  crossZoneLoadBalancing: String
  idleTimeout: String
  instances: awsElbInstances
  subnets: [String]
  instances: awsElbInstances
  healthCheck: awsElbHealthCheck
  tags: [Tag]
}

type awsElbSourceSecurityGroup
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  groupName: String! @id
  ownerAlias: String
}

type awsElbHealthCheck
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  target: String! @id
  interval: String
  timeout: String
  healthyThreshold: String
  unhealthyThreshold: String
}

type awsElbInstances
  @generate(
    query: { get: false, query: true, aggregate: false }
    mutation: { add: false, delete: false }
    subscription: false
  ) {
  connectionDraining: String
  connectionDrainingTimeout: String
  instanceData: String
}
